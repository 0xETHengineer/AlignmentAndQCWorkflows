<configuration name='bisulfiteCoreAnalysis' description=''
               configurationType='analysis'
               class='de.dkfz.roddy.core.Analysis'
               workflowClass='de.dkfz.b080.co.qcworkflow.BisulfiteCoreWorkflow'
               runtimeServiceClass='de.dkfz.b080.co.common.COProjectsRuntimeService'
               imports="commonCOWorkflowsSettings,qcAnalysis,coAppAndRef"
               canCreateTestdata='true'
               listOfUsedTools="alignment,accelerated:alignment,alignAndPair,accelerated:alignAndPair,alignAndPairSlim,accelerated:alignAndPairSlim,samtoolsIndex,samtoolsFlagstat,sampesort,sampesortSlim,qcSummary,mergeAndRemoveDuplicates,mergeAndRemoveDuplicatesSlimPicard,mergeAndRemoveDuplicatesSlimBioBambam,insertSizes,genomeCoverage,fastqc,coveragePlot,coveragePlotSingle,collectBamMetrics,chromosomeDiff"
               usedToolFolders="qcPipeline,qcPipelineTools,devel,tools"
               cleanupScript="cleanupScript">
    <configurationvalues>
        <cvalue name='sampleDirectory' value='${inputBaseDirectory}/${pid}/${sample}/${library}/${SEQUENCER_PROTOCOL}' type='path'/>
        <cvalue name='sequenceDirectory' value='${sampleDirectory}/${run}/sequence' type='path'/>

        <cvalue name='useBioBamBamMarkDuplicates' value='false' type="boolean"
                description="Currently, we do not know how to setup biobambam to just merge and NOT mark duplicates. Deprecated: use markDuplicatesVariant." />
        <cvalue name='markDuplicatesVariant' value='sambamba' type="string"
                description="Allowed values: biobambam, picard, sambamba. Default: sambamba. If set, this option takes precedence over the older useBioBamBamMarkDuplicates option."/>
        <cvalue name='useBioBamBamSort' value='false' type="boolean" />
        <cvalue name='useAcceleratedHardware' value='false' type="boolean"/>
 		<cvalue name='useAdaptorTrimming' value="true" type="boolean"
				description="true: Trim Adaptor sequences before alignment. If true, then CLIP_INDEX has to be set; false: Don't trim"/>
        <cvalue name='IS_TAGMENTATION' value="false" type="boolean"
                description="true: tagmentation; false: standard WGBS."/>
		<cvalue name='runFastQC' value='true' type="boolean"
				description="true: FASTQC analysis is performed; false: FASTQC analysis is not performed" />
		<cvalue name="runCoveragePlots" value="false" type="boolean"
				description="true: Plot genome-wide, binned read coverages; false: Don't plot" />
		<cvalue name="METH_CALLS_CONVERTER" value="none" type="string"
                description="none: Keep methylCtools output format. moabs: Convert to moabs format."/>
        <cvalue name='METH_CALL_PARAMETERS' value="-t -e 5 -x -z" type="string"
                description="Parameter to methylationCallingScript (see tools below)."/>
		<cvalue name="INDEX_PREFIX" value="${indexPrefix_bwa06_methylCtools_mm10_GRC}" type="path"
				description="Absolute path to the in-silico bisulfite converted reference sequenced used for alignment." />
		<cvalue name='CLIP_INDEX' value='$DIR_EXECUTION/analysisTools/qcPipelineTools/trimmomatic/adapters/tagmentationPlassGroup.fa' type="path"
				description="Absolute path to the sequences to be trimmed before alignment." />
		<cvalue name='CHROM_SIZES_FILE' value='${chromosomeSizesFile_mm10_GRC_bisulfite}' type="path"
				description="Absolute path to the chromosome sizes file. This file is related to the INDEX_PREFIX." />
        <cvalue name='CYTOSINE_POSITIONS_INDEX' value='${ch_pos_index_methylCtools_mm10GRC}' type="path"
				description="Absolute path to the tabixed BED file containing all cytosine positions. This file is based on the INDEX_PREFIX file." />
        <cvalue name='CHROMOSOME_INDICES' value='( 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y MT )' type='bashArray'
                description="Bash array (enclosed in parens) of chromosome identifiers as found in the BAM header. Mind 'chr' prefixes! See also CHROM_SIZES_FILE."/>

        <cvalue name='methCallingOutputDirectory' value='methylationCalling' type="path" />
        <cvalue name='methCallingMetricsOutputDirectory' value='methylationCallingMetrics' type="path" />

		<!-- The following parameters set up the folder structure of the project
				inputBaseDirectory (type="path")
				outputBaseDirectory (type="path")
				outputAnalysisBaseDirectory (type="path")
		-->

		<!-- Don't forget to set the possible sample names
				possibleControlSampleNamePrefixes (type="bashArray")
		-->

        <!-- The following parameters depend on the assembly:
             INDEX_PREFIX
             CHROM_SIZES_FILE
             CYTOSINE_POSITIONS_INDEX
             -->

        <!-- Other relevant options:
            CLIP_INDEX
            ADAPTOR_TRIMMING_OPTIONS_0
            ADAPTOR_TRIMMING_OPTIONS_1
            everything in qcAnalysis
        -->

    </configurationvalues>
    <processingTools>

        <tool name='alignAndPairSlim' value='bwaMemSortSlimWithReadConversionForBisulfiteData.sh' basepath='bisulfiteWorkflow' >
            <resourcesets>
                <!-- Test -->
                <rset size="t" memory="50" cores="8" nodes="1" walltime="1" queue="devel"/>
                 <!-- ChIP-Seq -->
                <rset size="s" memory="1" cores="8" nodes="1" walltime="2"/>
                <!-- exome part lane -->
                <rset size="m" memory="17" cores="8" nodes="1" walltime="6"/>
                <!-- HiSeq full lane. 24 h would be OK but as soon as there are I/O problems on the node, not even 36 h are sufficient - biobambam sort might also be slower than samtools, it seems to use fewer sorting threads	 -->
                <rset size="l" memory="45" cores="8" nodes="1" walltime="60"/>
                <!-- X10 lane -->
                <rset size="xl" memory="60" cores="8" nodes="1" walltime="120"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_1"/>
            <input type="file" typeof="de.dkfz.b080.co.files.LaneFile" scriptparameter="RAW_SEQ_2"/>
            <input type="string" setby="callingCode" scriptparameter="SAMPLE"/>
            <input type="string" setby="callingCode" scriptparameter="RUN"/>
            <input type="string" setby="callingCode" scriptparameter="LANE"/>
            <input type="string" setby="callingCode" scriptparameter="LB"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_1_INDEX"/>
            <input type="string" setby="callingCode" scriptparameter="RAW_SEQ_FILE_2_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_SORTED_BAM">
                <output type="file" variable="flagstatsFile" typeof="de.dkfz.b080.co.files.FlagstatsFile" scriptparameter="FILENAME_FLAGSTATS"/>
                <output type="file" variable="extendedFlagstatsFile" fnpatternselectiontag="extendedFlagstats" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_EXTENDED_FLAGSTATS"/>
                <output type="file" variable="chromosomeDiffStatisticsFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffValueFile" scriptparameter="FILENAME_DIFFCHROM_STATISTICS"/>
                <output type="file" variable="chromosomeDiffMatrixFile" typeof="de.dkfz.b080.co.files.ChromosomeDiffTextFile" scriptparameter="FILENAME_DIFFCHROM_MATRIX"/>
                <output type="file" variable="chromosomeDiffPlotFile" check="false" typeof="de.dkfz.b080.co.files.ChromosomeDiffPlotFile" scriptparameter="FILENAME_DIFFCHROM_PLOT"/>
                <output type="file" variable="insertSizesStatisticsFile" typeof="de.dkfz.b080.co.files.InsertSizesValueFile" scriptparameter="FILENAME_ISIZES_STATISTICS"/>
                <output type="file" variable="insertSizesMatrixFile" typeof="de.dkfz.b080.co.files.InsertSizesTextFile" scriptparameter="FILENAME_ISIZES_MATRIX"/>
                <output type="file" variable="insertSizesPlotFile" check="false" typeof="de.dkfz.b080.co.files.InsertSizesPlotFile" scriptparameter="FILENAME_ISIZES_PLOT"/>
                <output type="file" variable="genomeCoverageTextFile" fnpatternselectiontag="genomeCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_GENOME_COVERAGE"/>
                <output type="file" variable="readBinsCoverageTextFile" fnpatternselectiontag="readBinsCoverage" typeof="de.dkfz.b080.co.files.CoverageTextFile" scriptparameter="FILENAME_READBINS_COVERAGE"/>
                <output type="file" variable="qcSummaryFile" typeof="de.dkfz.b080.co.files.QCSummaryFile" scriptparameter="FILENAME_QCSUMMARY"/>
                <output type="file" variable="fingerprintsFile" fnpatternselectiontag="fingerprints" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_FINGERPRINTS" check="false"/>
                <output type="file" variable="qcJsonFile" fnpatternselectiontag="qcJson" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_QCJSON"/>
            </output>
        </tool>

        <tool name="methylationCalling" value="methylCtools_methylation_calling.sh" basepath="bisulfiteWorkflow">
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_MERGED_BAM"/>
            <input type="string" setby="callingCode" scriptparameter="PARM_CHR_INDEX"/>
            <output type="file" typeof="de.dkfz.b080.co.files.TextFile" scriptparameter="FILENAME_METH_CALLS_CHECKPOINT"/>
        </tool>

        <tool name="methylationCallingMeta" value="methylCtools_methylation_calling_meta.sh" basepath="bisulfiteWorkflow">
            <resourcesets>
                <rset size="t" memory="8" cores="3" nodes="1" queue="devel"/>
                <rset size="s" memory="8" cores="13" nodes="1" walltime="1"/>
                <rset size="m" memory="8" cores="13" nodes="1" walltime="15"/>
                <rset size="l" memory="8" cores="13" nodes="1" walltime="40"/>
                <rset size="xl" memory="20" cores="13" nodes="1" walltime="120"/>
            </resourcesets>
            <input type="file" typeof="de.dkfz.b080.co.files.BamFile" scriptparameter="FILENAME_MERGED_BAM" />
            <output type="tuple">
                <output type="file" typeof="MethylationMetaMetricsCheckpointFile" scriptparameter="FILENAME_METH_CALLS_META_METRICS_CHECKPOINT"/>
                <output type="file" typeof="MethylationMetaCheckpointFile" scriptparameter="FILENAME_METH_CALLS_META_CHECKPOINT" />
            </output>
        </tool>

        <tool name="methylCTools" value="methylCtools" basepath="bisulfiteWorkflow"></tool>

        <tool name="methylationCallingScript" value="bcall_2012Nov27.py" basepath="bisulfiteWorkflow"></tool>

        <tool name="methylationCallingScriptTagmentation" value="bcall_tagmentation_2012Nov25.py" basepath="bisulfiteWorkflow"></tool>

        <tool name="convertMethCallsMoabs" value="convert_meth_calls_moabs.sh" basepath="bisulfiteWorkflow"></tool>

    </processingTools>

    <filenames package='de.dkfz.b080.co.files' filestagesbase='de.dkfz.b080.co.files.COFileStage'>
        <!-- Filenames are always stored in the pid's output folder -->
        <!-- Different variables can be used:
            - ${sourcefile}, use the name and the path of the file from which the new name is derived
            - ${sourcefileAtomic}, use the atomic name of which the file is derived
            - ${sourcefileAtomicPrefix,delimiter=".."}, use the atomic name's prefix (without file-ending like .txt/.paired.bam...
                                                        of which the file is derived, set the delimiter option to define the delimiter default is "_"
                                                        the delimiter has to be placed inside "" as this is used to find the delimiter!
            - ${sourcepath}, use the path in which the source file is stored
            - ${outputbasepath}, use the output path of the pid
            - ${[nameofdir]OutputDirectory}

            NOTICE: If you use options for a variable your are NOT allowed to use ","! It is used to recognize options.

            - ${pid}
            - ${sample}
            - ${library}
            - ${run}
            - ${lane}
            - ${laneindex}
            - You can put in configuration values to do this use:
              ${cvalue,name=[name of the value],default=".."} where default is optional.
            - ${fileStageID} use the id String of the file's stage to build up the name.
            - You can put in job parameters:
              ${jobParameter,name="parameterName"}
            -->
        <!-- A filename can be derived from another file, use derivedFrom='shortClassName/longClassName'
             A filename can also be specified for a level, use fileStage='PID/SAMPLE/LIBRARY/RUN/LANE/INDEXEDLANE', refer to BaseFile.FileStage
             A filename can be specified for all levels, the name is then build up with the ${fileStageID} value
             A filename can be created using the file's called method's name
             A filename can be created using the used tool's name
             -->
        <filename class='MethylationMetaCheckpointFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${methCallingOutputDirectory}/.${sourcefileAtomic}.checkpoint'/>
        <filename class='MethylationMetaMetricsCheckpointFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${methCallingMetricsOutputDirectory}/.${sourcefileAtomic}.checkpoint'/>
        <filename class='AlignedSequenceFile' fileStage="INDEXEDLANE" pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${dataSet}_${sample}_${library}_${run}_${laneindex}_sequence.sai'/>
        <filename class='FastqcFile' onMethod="LaneFile.calcFastqc" pattern="${outputAnalysisBaseDirectory}/${fastx_qcOutputDirectory}/${dataSet}_${sample}_${library}_${run}_${lane}_${laneindex}_sequence_fastqc.zip"/>
        <filename class='TextFile'   onMethod="LaneFile.calcFastqc" pattern="${outputAnalysisBaseDirectory}/${fastx_qcOutputDirectory}/${dataSet}_${sample}_${library}_${run}_${lane}_${laneindex}_sequence_fastq_qcpass_status.txt"/>
        <filename class='BamMetricsAlignmentSummaryFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${metricsOutputDirectory}/${cvalue,name="COLLECT_METRICS_PREFIX"}.alignment_summary_metrics'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeAndRemoveDuplicates' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeSlim' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <filename class='BamFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlimWithLibrary' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${library}_${cvalue,name="defaultMergedBamSuffix"}'/>
        <!-- TODO targetextract should derive from the bamfile upon which it is based.-->
        <filename class='BamFile' onMethod='extractTargetsCalculateCoverage' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${pid}_${cvalue,name="TARGET_BAM_EXTENSION",default="targetExtract.rmdup.bam"}'/>
        <filename class='BamFile' onMethod='LaneFileGroup.alignAndPairSlim' pattern='${outputAnalysisBaseDirectory}/${alignmentOutputDirectory}/${sample}_${library}_${run}_${lane}_${cvalue,name="pairedBamSuffix"}'/>
        <filename class='BamIndexFile' derivedFrom='BamFile' pattern='${sourcefile}.bai'/>
        <filename class='BamMetricsFile' derivedFrom='BamFile' pattern='${sourcefile}.dupmark_metrics.txt'/>
        <filename class='FlagstatsFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${flagstatsOutputDirectory}/${sourcefileAtomic}_flagstats.txt'/>
        <filename class='ChromosomeDiffPlotFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.png'/>
        <filename class='ChromosomeDiffTextFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.txt'/>
        <filename class='ChromosomeDiffValueFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${structuralVariationOutputDirectory}/${sourcefileAtomic}_DiffChroms.png_qcValues.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlimWithLibrary' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_${library}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlimWithLibrary' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='AlignedSequenceFileGroup.pairAndSortSlim' selectiontag="readBinsCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='AlignedSequenceFileGroup.pairAndSortSlim' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.calcReadBinsCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.calcCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_Genome.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.rawBamCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}.DepthOfCoverage_RawBamFile.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.targetCoverage' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomic}.DepthOfCoverage_Target.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.extractTargetsCalculateCoverage' selectiontag="targetsWithCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_TargetsWithCov.txt'/>
        <filename class='CoverageTextFile' onMethod='BamFile.extractTargetsCalculateCoverage' selectiontag="genomeCoverage" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_targetExtract.rmdup.bam.DepthOfCoverage_Target.txt'/>
        <filename class="TextFile" derivedFrom="BamFile" selectiontag="extendedFlagstats" pattern='${outputAnalysisBaseDirectory}/${flagstatsOutputDirectory}/${sourcefileAtomic}_extendedFlagstats.txt'/>

        <filename class='OnTargetCoverageTextFile' derivedFrom="BamFile" pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sourcefileAtomic}_TargetsWithCov.txt'/>
        <filename class='OnTargetCoveragePlotFile' fileStage='de.dkfz.roddy.knowledge.files.FileStage.GENERIC' pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${sample}_${pid}_targetCovDistribution.png'/>
        <filename class='InsertSizesPlotFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsize_plot.png'/>
        <filename class='InsertSizesTextFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsizes.txt'/>
        <filename class='InsertSizesValueFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_insertsize_plot.png_qcValues.txt'/>

        <filename class='InsertSizesPlotFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsize_plot.png'/>
        <filename class='InsertSizesTextFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsizes.txt'/>
        <filename class='InsertSizesValueFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${insertSizesOutputDirectory}/${sourcefileAtomic}_insertsize_plot.png_qcValues.txt'/>

        <filename class='QCSummaryFile' derivedFrom='BamFile' pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_${sourcefileProperty,type}_wroteQcSummary.txt'/>

        <filename class='QCSummaryFile' derivedFrom='BamFile' selectiontag="targetExtract" pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomicPrefix,delimiter="_"}_wroteQcSummary.txt'/>

        <filename class="TextFile" derivedFrom="BamFile" selectiontag="qcJson" pattern='${outputAnalysisBaseDirectory}/${sourcefileAtomic}_qualitycontrol.json'/>

        <filename class="TextFile" onMethod='LaneFileGroup.alignAndPairSlim' selectiontag="fingerprints" pattern='${outputAnalysisBaseDirectory}/${fingerprintsOutputDirectory}/${sourcefileAtomic}.fp'/>
        <filename class="TextFile" onMethod='BamFileGroup.mergeAndRemoveDuplicatesSlimWithLibrary' selectiontag="fingerprints" pattern='${outputAnalysisBaseDirectory}/${fingerprintsOutputDirectory}/${sourcefileAtomic}.fp'/>
        <filename class="TextFile" onMethod='BamFileGroup.mergeSlim' selectiontag="fingerprints" pattern='${outputAnalysisBaseDirectory}/${fingerprintsOutputDirectory}/${sourcefileAtomic}.fp'/>

        <!-- TODO Throw error if value overrides other value!-->
        <filename class='GenomeCoveragePlotFile' derivedFrom='CoverageTextFile[2]'
                  pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${pid}_${sample[0]}_vs_${sample[1]}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows_coveragePlot.png'/>
        <filename class='GenomeCoveragePlotFile' derivedFrom='CoverageTextFile' selectiontag="singlePlot"
                  pattern='${outputAnalysisBaseDirectory}/${coverageOutputDirectory}/${pid}_${sample}_readCoverage_${cvalue,name="WINDOW_SIZE",default="1"}kb_windows_coveragePlot.png'/>
    </filenames>
</configuration>
